__________Compilation -O0

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000068  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

contient le code 
        
  1 .data         00000004  00000000  00000000  0000009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Contient x qui est code sur 4 octets

  2 .bss          00000001  00000000  00000000  000000a0  2**0
                  ALLOC

Contient un pointeur vers 4 octets ou est stocke y

  3 .rodata       00000032  00000000  00000000  000000a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Contient les chaines de caracteres "Hello World" et le contenu du printf
Il y a exactement un octet pour chaque char et deux en plus pour la fin des
chaines de caracteres.

  4 .comment      0000005a  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY

Contient un commentaire sur la version de GCC

  5 .ARM.attributes 0000002e  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY

Contient des infos sur la version du processeur


*******************************************************************
Pour static const char mesg[], les sections sont exactement les memes.

*******************************************************************
Pour const char *mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Le code est plus long de 4 octets.

  1 .data         00000008  00000000  00000000  000000a0  2**2

Contient x ET le pointeur mesg

*******************************************************************
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  3 .rodata       00000036  00000000  00000000  000000a0  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

rodata contient les deux chaines de caracteres ET le pointeur msg.
Chaque element est aligne sur un multiple de 4 octet d'ou l'augmentation en taille de 4 octet.

********************************************************************
__________Compilation -Os

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Vide, deplace dans .text.startup

  1 .data         00000004  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, DATA

RAS

  2 .bss          00000001  00000000  00000000  00000038  2**0
                  ALLOC

RAS

  3 .rodata.str1.1 00000022  00000000  00000000  00000038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

La section a diminue : elle ne contient plus que la chaine de caracteres du printf

  4 .text.startup 00000044  00000000  00000000  0000005c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

La section a diminue en taille de 24 octets, cela est du a une 
optimisation en taille du code assembleur

  5 .rodata       0000000e  00000000  00000000  000000a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Cette nouvelle section contient la chaine "HelloWorld!\n"

  6 .comment      0000005a  00000000  00000000  000000ae  2**0
                  CONTENTS, READONLY

RAS

  7 .ARM.attributes 0000002e  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY

RAS

******************************************************************
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  1 .data         00000008  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA

Contient x ET le pointeur vers Hello World

  3 .rodata.str1.1 00000030  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Le fait d'utiliser un pointeur mesg fait que les deux chaines de caracteres 
sont dans la meme section, dont la taille est egale a la somme des deux precedentes.

  4 .text.startup 00000040  00000000  00000000  0000006c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE


Le code est plus court de 4 octets, comme pour la compilation en -O0.

*******************************************************************
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  3 .rodata.str1.1 00000030  00000000  00000000  00000038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Contient les deux chaines de caracteres : Hello World et celle du printf.

  5 .rodata       00000004  00000000  00000000  000000ac  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Contient le pointeur vers la chaine Hello World.

******************************************************************
__________Copilation -O1

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

taille legerement superieure a celle du -Os

  1 .data         00000004  00000000  00000000  0000007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA

RAS

  2 .bss          00000001  00000000  00000000  00000080  2**0
                  ALLOC

RAS

  3 .rodata.str1.4 00000022  00000000  00000000  00000080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os, contient seulement la chaine du printf          
        
  4 .rodata       0000000e  00000000  00000000  000000a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os, contient Hello World

  5 .comment      0000005a  00000000  00000000  000000b2  2**0
                  CONTENTS, READONLY

RAS

  6 .ARM.attributes 0000002e  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY

RAS

******************************************************************
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000044  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Il y a 4 octets de moins dans le code comme en -Os et -O0.

  1 .data         00000008  00000000  00000000  00000078  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA

Il y a les quatre octets de x et les 4 octets du pointeur mesg.

  3 .rodata.str1.4 00000032  00000000  00000000  00000080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os, les deux sections rodata ont été regroupées, mais deux 
octets en plus sont apparus. Ces octets sont dus au fait que l'alignement 
se fait a present sur 4 octets et non plus un octet.

*******************************************************************
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  3 .rodata.str1.4 00000032  00000000  00000000  00000080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os et comme quand le pointeur n'etait pas constant (pour le meme code), 
les deux sections rodata ont été regroupées, mais deux octets en plus sont apparus. 
Ces octets sont dus au fait que l'alignement se fait a present sur 4 octets.

  4 .rodata       00000004  00000000  00000000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Comme en -Os, contient le pointeur vers la chaine Hello World.

******************************************************************
__________Compilation -O2

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Vide comme en -Os

  1 .data         00000004  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, DATA

RAS

  2 .bss          00000001  00000000  00000000  00000038  2**0
                  ALLOC

RAS

  3 .rodata.str1.4 00000022  00000000  00000000  00000038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Contient la chaine de caracteres du printf
                
  4 .text.startup 00000048  00000000  00000000  0000005c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Contient le code, de meme taille qu'en -O1 mais different

  5 .rodata       0000000e  00000000  00000000  000000a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Contient le Hello World

  6 .comment      0000005a  00000000  00000000  000000b2  2**0
                  CONTENTS, READONLY

RAS

  7 .ARM.attributes 0000002e  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY

RAS


******************************************************************
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  1 .data         00000008  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, DATA

Comme pour toutes les optimisations, .data contient x et mesg.

  3 .rodata.str1.4 00000032  00000000  00000000  0000003c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -O1, les deux rodata sont regroupes et deux octets en plus apparaissent,
dus a l'alignement de la chaine de caractere Hello World.

  4 .text.startup 00000044  00000000  00000000  00000070  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Le code a diminué de 4 octets, comme toutes les optimisations (-Os, -O1)

******************************************************************
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  3 .rodata.str1.4 00000032  00000000  00000000  00000038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os et en -O1 (mais aussi quand msg n'etait pas constant pour le meme code), 
contient HelloWorld et la chaine du printf, aligne sur 4 octets

  5 .rodata       00000004  00000000  00000000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Comme en -Os et en -O1, contient le pointeur msg.