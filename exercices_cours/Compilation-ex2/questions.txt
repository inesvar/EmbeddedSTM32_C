



__________Compilation -O0_________________________________________




QUESTION 1:


Sections:
                  Size       Algn
  0 .text         00000068   2**2

 .text contient le code 
        
  1 .data         00000004   2**2

.data contient x qui est code sur 4 octets (variable globale initialisee)

  2 .bss          00000001   2**0

.bss contient un pointeur vers 4 octets ou est stocke y

  3 .rodata       00000032   2**2

.rodata contient les chaines de caracteres "Hello World" et le contenu du printf
Il y a exactement un octet pour chaque char, deux en plus pour la fin des
chaines de caracteres, et de plus chaque chaine commence sur un multiple 
de 4 octets.

  4 .comment      0000005a  2**0

.comment contient un commentaire sur la version de GCC

  5 .ARM.attributes 0000002e  2**0

Contient des infos sur la version du processeur


*******************************************************************

QUESTION 2:
Pour static const char mesg[], les sections sont exactement les memes.
(avec arm-none-eabi-gcc 9.2.1 20191025)

*******************************************************************

QUESTION 3:
Pour const char *mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
Idx Name          Size      Algn
  0 .text         0000006c  2**2

Le code est plus long de 4 octets.

  1 .data         00000008  2**2

Contient x ET le pointeur mesg

*******************************************************************

QUESTION 3bis:
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
                  Size      Algn
  3 .rodata       00000036  2**2

rodata contient les deux chaines de caracteres ET le pointeur msg.
Chaque element est aligne sur un multiple de 4 octet d'ou l'augmentation en taille de 4 octet.

********************************************************************




__________Compilation -Os___________________________________________






QUESTION 1:

Sections:
                  Size      Algn
  0 .text         00000000  2**1

Vide, a ete deplace dans .text.startup

  1 .data         00000004  2**2

Comme pour la compilation sans optimisations, contient x.

  2 .bss          00000001  2**0

Comme en -O0, contient le pointeur vers y.

  3 .rodata.str1.1 00000022  2**0

Ce sous-section de .rodata ne contient plus que la chaine de caracteres du printf

  4 .text.startup 00000044  2**2

Le code a diminue en taille de 24 octets, cela est du a une 
optimisation en taille du code assembleur

  5 .rodata       0000000e  2**0

Cette section contient la chaine "HelloWorld!\n"

  6 .comment      0000005a  2**0

RAS

  7 .ARM.attributes 0000002e  2**0

RAS

******************************************************************

QUESTION 2:
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************

QUESTION 3:
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
                  Size      Algn
  1 .data         00000008  2**2

Contient x ET le pointeur mesg

  3 .rodata.str1.1 00000030  2**0

Le fait d'utiliser un pointeur mesg fait que les deux chaines de caracteres 
sont dans la meme sous-section, dont la taille est egale a la somme des deux precedentes.

  4 .text.startup 00000040  2**2

Le code est plus court de 4 octets (on peut remarquer que c'est comme pour la compilation en -O0)

*******************************************************************

QUESTION 3bis:
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
                   Size      Algn
  3 .rodata.str1.1 00000030 2**0

Contient les deux chaines de caracteres : Hello World et celle du printf.

  5 .rodata       00000004  2**2

Contient le pointeur vers la chaine Hello World.

******************************************************************





__________Compilation -O1_________________________________________





QUESTION 1:


Sections:
                  Size      Algn
  0 .text         00000048  2**2

code de taille legerement superieure a celle du -Os

  1 .data         00000004  2**2

comme en -Os et en -O0, c'est la variable x

  2 .bss          00000001  00000000  00000000  00000080  2**0
                  ALLOC

comme en -Os et en -O0, c'est la variable y

  3 .rodata.str1.4 00000022  2**2

Comme en -Os, contient seulement la chaine du printf          
        
  4 .rodata       0000000e  2**2

Comme en -Os, contient Hello World

  5 .comment      0000005a  2**0

RAS

  6 .ARM.attributes 0000002e  2**0

RAS

******************************************************************

QUESTION 2:
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************

QUESTION 3:
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
                  Size      Algn
  0 .text         00000044  2**2

Il y a 4 octets de moins dans le code comme en -Os et -O0.

  1 .data         00000008  2**2

Il y a les quatre octets de x et les 4 octets du pointeur mesg.

  3 .rodata.str1.4 00000032 2**2

Comme en -Os, les deux sections rodata ont été regroupées, mais deux 
octets en plus sont apparus. Ces octets sont dus au fait que l'alignement 
se fait a present sur 4 octets et non plus un octet.

*******************************************************************

QUESTION 3bis:
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
                   Size      Algn
  3 .rodata.str1.4 00000032  2**2

Comme en -Os et comme quand le pointeur n'etait pas constant (pour le meme code), 
les deux sections rodata ont été regroupées, mais deux octets en plus sont apparus. 
Ces octets sont dus au fait que l'alignement se fait a present sur 4 octets.

  4 .rodata       00000004  2**2

Comme en -Os, contient le pointeur vers la chaine Hello World.

******************************************************************





__________Compilation -O2__________________________________________




QUESTION 1:

Sections:
                  Size      Algn
  0 .text         00000000  2**1

Vide comme en -Os

  1 .data         00000004  2**2

Comme en -O0, -Os et -O1

  2 .bss          00000001  2**0

Comme en -O0, -Os et -O1

  3 .rodata.str1.4 00000022  2**2

Contient la chaine de caracteres du printf
                
  4 .text.startup 00000048  2**2

Contient le code, de meme taille qu'en -O1 mais different

  5 .rodata       0000000e  2**2

Contient le Hello World

  6 .comment      0000005a  2**0

RAS

  7 .ARM.attributes 0000002e  2**0

RAS


******************************************************************

QUESTION 2:
Pour static const char mesg[], les sections sont exactement les memes.

******************************************************************

QUESTION 3:
Pour const char *mesg, voici les sections de tailles differentes :

Sections:
                  Size      Algn
  1 .data         00000008  2**2

Comme pour toutes les optimisations, .data contient x et mesg.

  3 .rodata.str1.4 00000032 2**2

Comme en -O1, les deux rodata sont regroupes et deux octets en plus apparaissent,
dus a l'alignement de la chaine de caractere Hello World.

  4 .text.startup 00000044  2**2

Le code a diminué de 4 octets, comme toutes les optimisations (-Os, -O1)

******************************************************************


QUESTION 3bis :
Pour const char * const mesg, voici les sections de tailles differentes par rapport au code original :

Sections:
                   Size      Algn
  3 .rodata.str1.4 00000032  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Comme en -Os et en -O1 (mais aussi quand msg n'etait pas constant pour le meme code), 
contient HelloWorld et la chaine du printf, aligne sur 4 octets

  5 .rodata       00000004  2**2

Comme en -Os et en -O1, contient le pointeur msg.